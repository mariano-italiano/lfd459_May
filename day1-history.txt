kubec get po
kubectl get po
kubectl logs test-pod 
kubectl logs test-pod --all-containers 
kubectl logs -n kube-system kube-apiserver-k8s-master 
kubectl logs  kube-apiserver-k8s-master 
kubectl get pods
kubectl get pods -o wide
kubectl get pods -o json
kubectl get pods -o yaml
kubectl get pods test-pod -o yaml
kubectl run test-pod2 --image nginx
kubectl get pods
kubectl get pods test-pod2 -o yaml
kubectl edit pod test-pod2
kubectl get pods test-pod2 | grep labels -A2
kubectl get pods test-pod2 | grep -i labels -A2
kubectl get pods test-pod2 -o yaml| grep -i labels -A2
kubectl run test-pod4 --image nginx --labels app=test-pod3
kubectl get pods 
kubectl edit pod test-pod4
kubectl run test-pod3 --image nginx --labels app=test-pod3 --dry-run=client -o yaml
kubectl run test-pod3 --image nginx --labels app=test-pod3 --dry-run=client -o yaml > test-pod3.yaml
vi test-pod3.yaml
kubectl apply -f test-pod3.yaml 
vi test-pod3.yaml 
kubectl apply -f test-pod3.yaml 
kubectl get pod --show-labels 
kubectl get pod --selector app=test
kubectl describe pod test-pod
kubectl events test-pod
kubectl describe pod test-pod4
kubectl events test-pod4
kubectl events
kubectl get events -n default 
kubectl get events -A
kubectl get events -n kube-system 
kubectl events --sort-by .creationTimestamp
kubectl events --help
kubectl get events --sort-by=.metadata.creationTimestamp
kubectl get events --sort-by .metadata.creationTimestamp
kubectl get po
kubectl get po test-pod
kubectl get po test-pod --v 7
kubectl get po test-pod --v 10
kubectl run python-test --image marcinkujawski/python-api:1.0 -l app=python --dry-run=client -o yaml > python-test.yaml
vi python-test.yaml
kubectl apply -f python-test.yaml
kubectl get pod python-test -w
kubectl cluster-info
kubectl get pod -o wide
ls -la
vi test-pod3.yaml
mkdir app
cd app
ls -la
vi Dockerfile
vi requirements.txt
vi app.py
cat Dockerfile
ls -la
cd ..
ls -la
cp -rp python-test.yaml lfd409-test.yaml
vi lfd409-test.yaml
mv lfd409-test.yaml lfd459-test.yaml
kubectl apply -f lfd459-test.yaml
kubectl get pods
kubectl get pods -o wide
kubectl events
kubectl delete all all
kubectl delete all --all
kubectl apply -f lfd459-test.yaml
kubectl get pods -o wide
kubectl replace --force -f lfd459-test.yaml 
kubectl get pods
kubectl logs lfd459-test 
kubectl events
kubectl replace --force -f lfd459-test.yaml 
kubectl get pods
vi lfd459-test.yaml
kubectl events
vi lfd459-test.yaml
kubectl replace --force -f lfd459-test.yaml 
kubectl get pods
kubectl get pods -o wide
cat app/Dockerfile 
kubectl replace --force -f lfd459-test.yaml 
kubectl get pods -o wide
vi lfd459-test.yaml 
kubectl replace --force -f lfd459-test.yaml 
kubectl get pods -o wide
kubectl replace --force -f lfd459-test.yaml 
kubectl get pods -o wide
cd ..
kubectl apply -f day1/
kubectl get pods
kubectl delete pod lfd459-test 
kubectl apply --help
kubectl exec -it test-pod -- bash
kubectl exec -it test-pod -- sh
kubectl exec -it test-pod -- ls -la
vi ~/.kube/config 
echo LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURLVENDQWhHZ0F3SUJBZ0lJVCtZY2ZyQlFMdEV3RFFZSktvWklodmNOQVFFTEJRQXdGVEVUTUJFR0ExVUUKQXhNS2EzVmlaWEp1WlhSbGN6QWVGdzB5TkRBMU1EWXdOelV4TURSYUZ3MHlOVEExTURZd056VTJNRFphTUR3eApIekFkQmdOVkJBb1RGbXQxWW1WaFpHMDZZMngxYzNSbGNpMWhaRzFwYm5NeEdUQVhCZ05WQkFNVEVHdDFZbVZ5CmJtVjBaWE10WVdSdGFXNHdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFDYUZLdXEKc1p0MlpyMlljbXNwVE95b1lxVkRwbG54UU5wNC9RYjFFZXFadkRyNFgzUTVqY2NOd2lxNk9EYm0wWDNjcTZOMAp1a2c1NDA4RlBYUXdEYUFCNmJsdE90dEQzZEtsOTU3bEp5NHdkL2sxUURCTDJ6MmZrSDg5Vmx6VHdxbFgxZnJICjRhZTZyQVp1Zk5iWkRxTTZBRU5XWU1DcVRweEZETUo5eEloWlZ4eTdNUUdmdTRhTFFtUDZ4RGZvOUNFUHA0WXkKNk1iRzc5bDZrUHk0ZUJVRjZiYXJ4dWFhY21sYndNY3FtSVJGZTFST09QejV1UjZ1K2xzcDVSUXVoVUptTDdHeQpqYXZBd1oraVJ2amE0WUVjSFNYb2YxTUpQaElWVnB5Sm5FRk9tK2xJSHpuWE85Qm14Vm9USG9neHN0STVGeHQ4ClAxWGh3bFNoUlJJcU1samZBZ01CQUFHalZqQlVNQTRHQTFVZER3RUIvd1FFQXdJRm9EQVRCZ05WSFNVRUREQUsKQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RUFqQUFNQjhHQTFVZEl3UVlNQmFBRk1mYnQ5Qldxd0F2NCtHRQpFVDRPb1NhVGlUNTRNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUNRZDlMbG9CTm4xeG9wMTVxajBJazA2V0pMCkdKWXFzOGxmYmF3R0YwVUM5QktMRHNHaGFsbExjSmE1NFY5S3VpUjE1OEVGajByOU9BSXA1dXIwMm5oQVNSUHoKUktvbE5lWFhQcllJY29EdHdFVmM1V0tCN1UxU2lOdGlucnpjOFFkaHkvMC9EdnY1Umo3Yjc0MjZnVDBVQllJUwpSN2J6ZkxhKy9kK3o5SVdwVWRyaUtNK1hxU2JwUERJMmRFdkJGQ0N0SHpjMzFLN2piL3hNRDVndnp2RmxPRXBzCjZ0N0IrY3hncHY4M0Vjc01NdVBoUlVDcy9UVTFlVTM2N2dGSDQ1YVBibEtDZG1JMGo5SHh6dHlIdk4yTXRob3cKcGliVlVPR1lOeUdIMWF6a0xNOGpMRVlFTFZ3bUIwY0Jod21jNmdZNEFCUXpUZE1XUU9CckNpK0dvR1drCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K | base64 -d
vi ~/.kube/config 
export client=$(grep client-cert ~/.kube/config )
export client=$(grep client-cert ~/.kube/config | cut -d " " -f 6 )
echo $client 
export key=$(grep client-key ~/.kube/config | cut -d " " -f 6 )
export auth=$(grep certificate-authority ~/.kube/config | cut -d " " -f 6 )
echo $client | base64 -d
echo $client | base64 -d > client.pem
echo $key | base64 -d
echo $key | base64 -d > client.key
echo $auth | base64 -d
echo $auth | base64 -d > ca.pem
kubectl cluster-info 
curl --cert client.pem --key client.key --cacert ca.pem  https://172.16.2.106:6443/api/v1/nodes
curl --cert client.pem --key client.key --cacert ca.pem  https://172.16.2.106:6443/api/v1/nodes | jq -r '.items[].metadata.name
sudo apt  install jq  -y
curl --cert client.pem --key client.key --cacert ca.pem  https://172.16.2.106:6443/api/v1/nodes | jq -r '.items[].metadata.name'
curl --cert client.pem --key client.key --cacert ca.pem  https://172.16.2.106:6443/api/v1/pods
curl --cert client.pem --key client.key --cacert ca.pem  https://172.16.2.106:6443/api/v1/namespaces
curl --cert client.pem --key client.key --cacert ca.pem  https://172.16.2.106:6443/api/v1/pods | jq -r '.items[].metadata.name'
curl --cert client.pem --key client.key --cacert ca.pem  https://172.16.2.106:6443/api/v1/namespaces/default/pods | jq -r '.items[].metadata.name'
kubectl config --help
kubectl config current-context
kubectl config get-context
kubectl config get-contexts
openssl genrsa -out devlops.key
openssl req -new -key devlops.key -out devops.csr -sub "/CN=devops"
openssl req -new -key devlops.key -out devops.csr -subj "/CN=devops"
cat devops.csr 
cat devops.csr | base64 | tr -d '\n'
cd day1
vi user-request-devops.yaml
kubectl apply -f user-request-devops.yaml 
kubectl certificate 
kubectl get csr
kubectl certificate approve user-request-devops
kubectl get csr
kubectl get csr user-request-devops -o jsonpath
kubectl get csr user-request-devops -o jsonpath='.status.certificate'
kubectl get csr user-request-devops -o jsonpath='{.status.certificate}'
kubectl get csr user-request-devops -o jsonpath='{.status.certificate}'| base64 -d 
kubectl get csr user-request-devops -o jsonpath='{.status.certificate}'| base64 -d > ../devops.crt
kubectl get csr user-request-devops
kubectl get csr user-request-devops -o json
ls -la ../
mv ../dev* .
ls -la
mv devlops.key devops.key
ls -la
kubectl --kubeconfig config-devops config set-cluster prod --insecure-skip-tls-verify=true --server=https://172.16.2.106:6443
kubectl --kubeconfig config-devops config set-credentials devops --client-certificate devops.crt --client-key devops.key --embed-certs=true
vi config-devops 
kubectl --kubeconfig config-devops config set-context devops-context --cluster prod --user devops
vi config-devops 
kubectl --kubeconfig config-devops config use-context devops-context
vi config-devops 
sudo useradd devops -m -s /bin/bash
sudo -i
kubectl create ns devops-ns
kubectl -n devops-ns create role --help
kubectl -n devops-ns create role devops-role --verb=get,list,watch --resource=pods
kubectl  get roles
kubectl  get roles -n devops-ns
kubectl describe roles -n devops-ns
kubectl -n devops-ns create rolebinding devops-rolebinding --help
kubectl -n devops-ns create rolebinding devops-rolebinding --role=devops-role --user=devops 
sudo -i
kubectl --kubeconfig config-devops get pods -n devops-ns
kubectl --kubeconfig config-devops get deploy -n devops-ns
kubectl auth can-i --help
kubectl auth can-i get pods -n devops-ns --kubeconfig config-devops 
kubectl auth can-i get deploy -n devops-ns --kubeconfig config-devops 
kubectl create sa my-svc-acc
kubectl get sa
kubectl get clusterrole
kubectl create clusterrolebinding --help
kubectl create clusterrolebinding my-svc-acc-clusterrolebinding  --clusterrole=admin --serviceaccount=default:my-svc-acc 
kubectl auth can-i get deploy -n devops-ns --help
kubectl auth can-i get deploy -n devops-ns --as=system:serviceaccount:default:my-svc-acc
kubectl auth can-i delete deploy -n devops-ns --as=system:serviceaccount:default:my-svc-acc
kubectl auth can-i delete deploy -n kube-system --as=system:serviceaccount:default:my-svc-acc
kubectl create token my-svc-acc 
export TOKEN=$(kubectl create token my-svc-acc) 
curl -k -H "Authorization: Bearer $TOKEN" -X GET https://172.16.2.106:6443/api/v1/namespaces | jq -r .items[].metadata.name'
curl -k -H "Authorization: Bearer $TOKEN" -X GET https://172.16.2.106:6443/api/v1/namespaces | jq -r '.items[].metadata.name'
kubectl create token --help
kubectl create token --duration=365d
kubectl create token --duration=525600m
kubectl create token --duration=31536000s
kubectl create token my-svc-acc --duration=525600m
kubectl create token my-svc-acc --duration=365d
history
history | awk '$1 > 45' | cut -c 8- > ../day1-history.txt
